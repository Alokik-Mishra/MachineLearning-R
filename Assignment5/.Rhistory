plot2
plot2<-ggplot(Combined, aes(x,y))+
geom_point(aes(color=factor(cluster)))+ facet_grid(~Total_K) +
labs(xlab="x")+
labs(ylab="y")+
labs(title = "Cluster Visualization", x = "X", y = "Y", color = "# of Clusters") +
theme_tufte() +
theme(legend.position = "bottom")
plot2
ggsave("Images/Clusters2.png", plot = plot2)
rm(list= ls())
Train <- read.csv("Data/ratings.csv", header = FALSE)
colnames(Train) <- c("user_id", "movie_id", "rating")
Train <-spread(Train,movie_id, rating)[,-1]
Test <- read.csv("Data/ratings_test.csv", header = FALSE)
colnames(Test) <- c("user_id", "movie_id", "rating")
Test <-spread(Test,movie_id, rating)[,-1]
Lam <- 1
Rank <- 10
Sig_2 <- 0.25
Trial <- 10
Iter <- 100
RMSE<-rep(NA, Trial)
U_all <- list()
V_all <- list()
L_f <- as.data.frame((matrix(nrow = Iter , ncol = Trial)))
Users <- nrow(Train)
Items <- ncol(Train)
U <- matrix(NA, nrow = Users, ncol = Rank)
V <- matrix(NA, nrow = Rank, ncol = Items)
for(t in 1:Trial)
{
print(t)
Mu <- as.vector(rep(0, Rank))
Sig <- Lam*diag(Rank)
Mnorm <- function(vector)
{
vector = rmvnorm(1, mean = Mu, sigma = Sig)
}
U <- t(apply(U, 1, Mnorm))
V <- (apply(V, 2, Mnorm))
Train_mat <- as.matrix(Train)
L_f_f <- c()
for(num in 1:Iter)
{
paste("inner loop #", num)
for (i in 1:nrow(U))
{
Users_Omega <- as.matrix(Train_mat[i,])
Users_Omega <- t(Users_Omega)
Rated_j <- which(!is.na(Users_Omega))
V_temp <- V[,Rated_j]
X_1 <- V_temp %*% t(V_temp)
X_2 <- Lam * Sig_2 * diag(Rank)
X_inv <- solve(X_1 + X_2)
Rated_j_2 <- as.matrix(t(Users_Omega[Rated_j]))
X_3 <- V_temp %*% t(Rated_j_2)
X_final <- X_inv %*% X_3
U[i,]<- t(X_final)
}
for (j in 1:ncol(V))
{
Items_Omega <- as.matrix(Train_mat[,j])
Rated_i <- which(!is.na(Items_Omega))
U_temp <- as.matrix(U[Rated_i,])
if (length(Rated_i)>1)
{
U_temp<-t(U_temp)
}
Y_1 <- U_temp %*% t(U_temp)
Y_2 <- Lam * Sig_2 * diag(Rank)
Y_inv <- solve(Y_1 + Y_2)
Rated_i_2 <- as.matrix(t(Items_Omega[Rated_i]))
Y_3 <- (U_temp) %*% t(Rated_i_2)
Y_final <- Y_inv %*% Y_3
V[,j] <- Y_final
}
Pred_rate <- U%*%V
Miss <- (sum(is.na(Train_mat)))
All <- nrow(Train_mat) * ncol(Train_mat)
Temp <- All - Miss
E <- Pred_rate - Train_mat
E <- E^2
L_pt1 <- (sum(E, na.rm=TRUE))/(2*Sig_2)
Miss_2 <- (sum(is.na(E)))
U1 <- as.matrix(c(t(U)))
L_pt2 <- (t(U1) %*% U1) * (Lam/2)
V1 <- as.matrix(c((V)))
L_pt3 <- (t(V1) %*% V1) * (Lam/2)
L <- -(L_pt1 + L_pt2 + L_pt3)
L_f_f[num]<-L
}
U_all[[t]] <- U
V_all[[t]] <- V
L_f[,t] <- L_f_f
Test_mat <- as.matrix(Test)
Pred_rate <- U%*%V
Miss <- (sum(is.na(Test_mat)))
Pred_2 <- Pred_rate[1:nrow(Test_mat),1:ncol(Test_mat)]
E <- Pred_2 - Test_mat
All <- nrow(Test_mat)*ncol(Test_mat)
Num2 <- All - Miss
E <- E^2
Mean_sq_err <- (sum(E, na.rm=TRUE))/Num2
Mean_sq_err_root <- sqrt(Mean_sq_err)
RMSE[t] <- Mean_sq_err_root
}
N_iter <- c(1:100)
L_f2 <- cbind(L_f, N_iter)
colnames(L_f2) <- c("1","2", "3", "4", "5", "6","7","8","9","10", "iterations")
L_f2 <- L_f2[-1,]
Outcome <- melt(L_f2, id="iterations")
colnames(Outcome)[2] <- "code_run_number"
### Plotting 2(a)
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
rm(list= ls())
Train <- read.csv("Data/ratings.csv", header = FALSE)
colnames(Train) <- c("user_id", "movie_id", "rating")
Train <-spread(Train,movie_id, rating)[,-1]
Test <- read.csv("Data/ratings_test.csv", header = FALSE)
colnames(Test) <- c("user_id", "movie_id", "rating")
Test <-spread(Test,movie_id, rating)[,-1]
getwd()
setwd("~/GitHub/MachineLearningR/Assignment4")
rm(list= ls())
Train <- read.csv("Data/ratings.csv", header = FALSE)
colnames(Train) <- c("user_id", "movie_id", "rating")
Train <-spread(Train,movie_id, rating)[,-1]
Test <- read.csv("Data/ratings_test.csv", header = FALSE)
colnames(Test) <- c("user_id", "movie_id", "rating")
Test <-spread(Test,movie_id, rating)[,-1]
Lam <- 1
Rank <- 10
Sig_2 <- 0.25
Trial <- 10
Iter <- 100
RMSE<-rep(NA, Trial)
U_all <- list()
V_all <- list()
L_f <- as.data.frame((matrix(nrow = Iter , ncol = Trial)))
Users <- nrow(Train)
Items <- ncol(Train)
U <- matrix(NA, nrow = Users, ncol = Rank)
V <- matrix(NA, nrow = Rank, ncol = Items)
for(t in 1:Trial)
{
print(t)
Mu <- as.vector(rep(0, Rank))
Sig <- Lam*diag(Rank)
Mnorm <- function(vector)
{
vector = rmvnorm(1, mean = Mu, sigma = Sig)
}
U <- t(apply(U, 1, Mnorm))
V <- (apply(V, 2, Mnorm))
Train_mat <- as.matrix(Train)
L_f_f <- c()
for(num in 1:Iter)
{
paste("inner loop #", num)
for (i in 1:nrow(U))
{
Users_Omega <- as.matrix(Train_mat[i,])
Users_Omega <- t(Users_Omega)
Rated_j <- which(!is.na(Users_Omega))
V_temp <- V[,Rated_j]
X_1 <- V_temp %*% t(V_temp)
X_2 <- Lam * Sig_2 * diag(Rank)
X_inv <- solve(X_1 + X_2)
Rated_j_2 <- as.matrix(t(Users_Omega[Rated_j]))
X_3 <- V_temp %*% t(Rated_j_2)
X_final <- X_inv %*% X_3
U[i,]<- t(X_final)
}
for (j in 1:ncol(V))
{
Items_Omega <- as.matrix(Train_mat[,j])
Rated_i <- which(!is.na(Items_Omega))
U_temp <- as.matrix(U[Rated_i,])
if (length(Rated_i)>1)
{
U_temp<-t(U_temp)
}
Y_1 <- U_temp %*% t(U_temp)
Y_2 <- Lam * Sig_2 * diag(Rank)
Y_inv <- solve(Y_1 + Y_2)
Rated_i_2 <- as.matrix(t(Items_Omega[Rated_i]))
Y_3 <- (U_temp) %*% t(Rated_i_2)
Y_final <- Y_inv %*% Y_3
V[,j] <- Y_final
}
Pred_rate <- U%*%V
Miss <- (sum(is.na(Train_mat)))
All <- nrow(Train_mat) * ncol(Train_mat)
Temp <- All - Miss
E <- Pred_rate - Train_mat
E <- E^2
L_pt1 <- (sum(E, na.rm=TRUE))/(2*Sig_2)
Miss_2 <- (sum(is.na(E)))
U1 <- as.matrix(c(t(U)))
L_pt2 <- (t(U1) %*% U1) * (Lam/2)
V1 <- as.matrix(c((V)))
L_pt3 <- (t(V1) %*% V1) * (Lam/2)
L <- -(L_pt1 + L_pt2 + L_pt3)
L_f_f[num]<-L
}
U_all[[t]] <- U
V_all[[t]] <- V
L_f[,t] <- L_f_f
Test_mat <- as.matrix(Test)
Pred_rate <- U%*%V
Miss <- (sum(is.na(Test_mat)))
Pred_2 <- Pred_rate[1:nrow(Test_mat),1:ncol(Test_mat)]
E <- Pred_2 - Test_mat
All <- nrow(Test_mat)*ncol(Test_mat)
Num2 <- All - Miss
E <- E^2
Mean_sq_err <- (sum(E, na.rm=TRUE))/Num2
Mean_sq_err_root <- sqrt(Mean_sq_err)
RMSE[t] <- Mean_sq_err_root
}
N_iter <- c(1:100)
L_f2 <- cbind(L_f, N_iter)
colnames(L_f2) <- c("1","2", "3", "4", "5", "6","7","8","9","10", "iterations")
L_f2 <- L_f2[-1,]
Outcome <- melt(L_f2, id="iterations")
colnames(Outcome)[2] <- "code_run_number"
### Plotting 2(a)
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
View(Outcome)
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+ scale_y_continuous(trans="log2") +
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
plot1
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+ ylim(-10000, -9000) +
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+ ylim(-100000, -90000) +
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+ ylim(-93000, -90000) +
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
plot1<-ggplot(data = Outcome, aes(x=iterations, y=value, colour=code_run_number)) +
geom_line()+ ylim(-95000, -90000) +
labs(title = "", x = "Iterations", y = "Ln L", color = "Trial") + theme_tufte()
plot1
ggsave("Images/Matrix_Factor.png", plot = plot1)
setwd("~/GitHub/MachineLearningR/Assignment5")
## Packages loading/installation
auto_load <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("readr", "tidyverse", "ggplot2", "ggthemes", "reshape2")
auto_load(packages)
## Question 1
## Setup
rm(list = ls())
Scores<-read.csv("Data/CFB2017_scores.csv", head=FALSE)
Scores2 <- Scores %>%
rename(Team_A = V1,
Team_A_Points = V2,
Team_B = V3,
Team_B_Points = V4)
TotalGames <- nrow(Scores2)
Games_Mat <- matrix(0, 763, 763)
## Generating Transition Matrix
for (num in 1:TotalGames) {
TeamA <- Scores2$Team_A[num]
TeamB <- Scores2$Team_B[num]
Points_A <- Scores2$Team_A_Points[num]
Points_B <- Scores2$Team_B_Points[num]
A_pct <- Points_A/(Points_A + Points_B)
B_pct <- Points_B/(Points_A + Points_B)
if (Points_A > Points_B) {
Games_Mat[TeamA,TeamA] <- Games_Mat[TeamA,TeamA] + 1 + A_pct
Games_Mat[TeamB,TeamA] <- Games_Mat[TeamB,TeamA] + 1 + A_pct
Games_Mat[TeamB,TeamB] <- Games_Mat[TeamB,TeamB] + 0 + B_pct
Games_Mat[TeamA,TeamB] <- Games_Mat[TeamA,TeamB] + 0 + B_pct
}
if (Points_B > Points_A) {
Games_Mat[TeamA,TeamA] <- Games_Mat[TeamA,TeamA] + 0 + A_pct
Games_Mat[TeamB,TeamA] <- Games_Mat[TeamB,TeamA] + 0 + A_pct
Games_Mat[TeamB,TeamB] <- Games_Mat[TeamB,TeamB] + 1 + B_pct
Games_Mat[TeamA,TeamB] <- Games_Mat[TeamA,TeamB] + 1 + B_pct
}
}
for (i in 1:763)
{
Games_Mat[i,]<-Games_Mat[i,] / (sum(Games_Mat[i,]))
}
w0 <- as.matrix(c(rep(1/763, 763)))
State <- function(t,W0,M) {
for (step in 1:t){
W0 <- W0%*%M
}
W0 <- W0/(sum(W0))
return(W0)
}
Teams <- readLines("Data/TeamNames.txt")
Teams<-data.frame(Teams)
colnames(Teams)<-"team"
Rank <- function(W, DF, t, band) {
Order <- order(W, decreasing = TRUE)
Band <- Order[1:band]
Band_Val <- W[Band]
Band_Teams <- data.frame(DF[Band,])
Result <- cbind(Band, Band_Teams , Band_Val)
colnames(result)<-c("Index", "Team", "Wt")
Title <- paste(t , ".csv", sep="")
write.csv(Result,file = Title)
a <- assign(Title, Result)
return(a)
}
## A
Output <- c(10, 100, 1000, 10000)
for (O in Output) {
w_10 <- State(t = O,W0 = t(w0),M = Games_Mat)
result <- Rank(W = w_10,DF = Teams, t = O, band = 25)
}
## B
E <- eigen(t(Games_Mat))
E_1 <- as.matrix(E$vectors[,1])
E_1 <- Re(E_1)
W_stationary <- t(E_1/sum(E_1))
W_new <- t(w0)
D <- rep(NA,10000)
for (i in 1:10000) {
W_new <- W_new%*%Games_Mat
D[i] <- sum(abs(W_new - W_stationary))
}
## Packages loading/installation
auto_load <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("readr", "tidyverse", "ggplot2", "ggthemes", "reshape2")
auto_load(packages)
## Question 1
## Setup
rm(list = ls())
Scores<-read.csv("Data/CFB2017_scores.csv", head=FALSE)
Scores2 <- Scores %>%
rename(Team_A = V1,
Team_A_Points = V2,
Team_B = V3,
Team_B_Points = V4)
TotalGames <- nrow(Scores2)
Games_Mat <- matrix(0, 763, 763)
## Generating Transition Matrix
for (num in 1:TotalGames) {
TeamA <- Scores2$Team_A[num]
TeamB <- Scores2$Team_B[num]
Points_A <- Scores2$Team_A_Points[num]
Points_B <- Scores2$Team_B_Points[num]
A_pct <- Points_A/(Points_A + Points_B)
B_pct <- Points_B/(Points_A + Points_B)
if (Points_A > Points_B) {
Games_Mat[TeamA,TeamA] <- Games_Mat[TeamA,TeamA] + 1 + A_pct
Games_Mat[TeamB,TeamA] <- Games_Mat[TeamB,TeamA] + 1 + A_pct
Games_Mat[TeamB,TeamB] <- Games_Mat[TeamB,TeamB] + 0 + B_pct
Games_Mat[TeamA,TeamB] <- Games_Mat[TeamA,TeamB] + 0 + B_pct
}
if (Points_B > Points_A) {
Games_Mat[TeamA,TeamA] <- Games_Mat[TeamA,TeamA] + 0 + A_pct
Games_Mat[TeamB,TeamA] <- Games_Mat[TeamB,TeamA] + 0 + A_pct
Games_Mat[TeamB,TeamB] <- Games_Mat[TeamB,TeamB] + 1 + B_pct
Games_Mat[TeamA,TeamB] <- Games_Mat[TeamA,TeamB] + 1 + B_pct
}
}
for (i in 1:763)
{
Games_Mat[i,]<-Games_Mat[i,] / (sum(Games_Mat[i,]))
}
w0 <- as.matrix(c(rep(1/763, 763)))
State <- function(t,W0,M) {
for (step in 1:t){
W0 <- W0%*%M
}
W0 <- W0/(sum(W0))
return(W0)
}
Teams <- readLines("Data/TeamNames.txt")
Teams<-data.frame(Teams)
colnames(Teams)<-"team"
Rank <- function(W, DF, t, band) {
Order <- order(W, decreasing = TRUE)
Band <- Order[1:band]
Band_Val <- W[Band]
Band_Teams <- data.frame(DF[Band,])
Result <- cbind(Band, Band_Teams , Band_Val)
colnames(Result)<-c("Index", "Team", "Wt")
Title <- paste(t , ".csv", sep="")
write.csv(Result,file = Title)
a <- assign(Title, Result)
return(a)
}
## A
Output <- c(10, 100, 1000, 10000)
for (O in Output) {
w_10 <- State(t = O,W0 = t(w0),M = Games_Mat)
result <- Rank(W = w_10,DF = Teams, t = O, band = 25)
}
## B
E <- eigen(t(Games_Mat))
E_1 <- as.matrix(E$vectors[,1])
E_1 <- Re(E_1)
W_stationary <- t(E_1/sum(E_1))
W_new <- t(w0)
D <- rep(NA,10000)
for (i in 1:10000) {
W_new <- W_new%*%Games_Mat
D[i] <- sum(abs(W_new - W_stationary))
}
t <- seq(1:10000)
Data <- data.frame('W-W_stationary' = D, Time = t)
ggplot(data = Data) +
geom_line(aes(x = Time, y = W.W_stationary)) +
ylab(bquote(~abs( W[0] - W[inf] ))) +
ggtitle("Question 1 B") + theme_tufte()
ggplot(data = Data) +
geom_line(aes(x = Time, y = W.W_stationary)) +
ylab(bquote(~abs( W[0] - W[inf] ))) +
ggtitle("Markov Chain: Stable State") + theme_tufte()
ggsave("Images/Markov.png")
rm(list = ls())
Name <- "Data/nyt_data.txt"
NYT <- file(Name,open="r")
LineN <- readLines(NYT)
X <- matrix(0,nrow=3012, ncol=8447)
for (i in 1:length(LineN)){
Line <- LineN[i]
Y1 <- strsplit(Line,",")[[1]]
for (j in 1:length(Y1)) {
Y2 <- strsplit(Y1[j], ":")[[1]]
Z1 <- as.numeric(Y2[1])
Z2 <- as.numeric(Y2[2])
X[Z1,i] <- Z2
}
}
close(NYT)
N <- nrow(X)
M <- ncol(X)
K <- 25
W<-matrix(runif(N*K,min=1, max=2), nrow=N, ncol=K)
H<-matrix(runif(K*M, min=1, max=2), nrow=K, ncol=M)
Penalty <- c(rep(NA,100))
## Algo for Divergence Penalty
for (i in 1:100) {
Y <- W%*%H
Y <- Y+10^(-16)
Z <- X/Y
W_t <- t(W)
W_t <-t(apply(W_t, 1, function(x) x/sum(x)))
H <- H*(W_t%*%Z)
Y <- W%*%H
Y <- Y+10^(-16)
Z <- X/Y
H_t <- t(H)
H_t <- (apply(H_t, 2, function(x) x/sum(x)))
W <- W*(Z%*%H_t)
Combined <- W%*%H
Combined <- Combined + 10^(-16)
Combined2 <- log(Combined)
Final <- X*Combined2 - Combined
Penalty[i] <- -(sum(Final))
print(paste("Iter", i, "Complete"))
}
## A
Iteration <- seq(1:100)
Data <- data.frame(Penalty, Iteration)
ggplot(data = Data)+
geom_line(aes(x = Iteration, y = Penalty)) +
theme_tufte() + ggtitle("Penalty Convergence")
ggsave("Images/NNMF_Divergence.png")
W <- (apply(W, 2, function(x) x/sum(x)))
Name <- "Data/nyt_vocab.dat"
NYT <- file(Name, open="r")
Bag <-readLines(NYT)
close(NYT)
Output <- data.frame(matrix(NA,nrow=10))
for (k in 1:ncol(W)) {
K <-W[,k]
Selected <- order(K, decreasing = TRUE)[1:10]
Select_Terms <- Bag[Selected]
Output[,paste0("Term",k)] <- Select_Terms
Weight <- K[Selected]
Output[,paste0("Weights",k)] <- Weight
}
Output <- Output[,-1]
write.csv(Output, file = "Topics_2B.csv")
